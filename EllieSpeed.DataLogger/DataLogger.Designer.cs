//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
namespace EllieSpeed.DataLogger
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class DataLogger : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new DataLogger object using the connection string found in the 'DataLogger' section of the application configuration file.
        /// </summary>
        public DataLogger() : base("name=DataLogger", "DataLogger")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new DataLogger object.
        /// </summary>
        public DataLogger(string connectionString) : base(connectionString, "DataLogger")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new DataLogger object.
        /// </summary>
        public DataLogger(EntityConnection connection) : base(connection, "DataLogger")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<BikeData> BikeDatas
        {
            get
            {
                if ((_BikeDatas == null))
                {
                    _BikeDatas = base.CreateObjectSet<BikeData>("BikeDatas");
                }
                return _BikeDatas;
            }
        }
        private ObjectSet<BikeData> _BikeDatas;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<BikeEvent> BikeEvents
        {
            get
            {
                if ((_BikeEvents == null))
                {
                    _BikeEvents = base.CreateObjectSet<BikeEvent>("BikeEvents");
                }
                return _BikeEvents;
            }
        }
        private ObjectSet<BikeEvent> _BikeEvents;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<BikeLap> BikeLaps
        {
            get
            {
                if ((_BikeLaps == null))
                {
                    _BikeLaps = base.CreateObjectSet<BikeLap>("BikeLaps");
                }
                return _BikeLaps;
            }
        }
        private ObjectSet<BikeLap> _BikeLaps;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<BikeSession> BikeSessions
        {
            get
            {
                if ((_BikeSessions == null))
                {
                    _BikeSessions = base.CreateObjectSet<BikeSession>("BikeSessions");
                }
                return _BikeSessions;
            }
        }
        private ObjectSet<BikeSession> _BikeSessions;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<BikeSplit> BikeSplits
        {
            get
            {
                if ((_BikeSplits == null))
                {
                    _BikeSplits = base.CreateObjectSet<BikeSplit>("BikeSplits");
                }
                return _BikeSplits;
            }
        }
        private ObjectSet<BikeSplit> _BikeSplits;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<TrackSegment> TrackSegments
        {
            get
            {
                if ((_TrackSegments == null))
                {
                    _TrackSegments = base.CreateObjectSet<TrackSegment>("TrackSegments");
                }
                return _TrackSegments;
            }
        }
        private ObjectSet<TrackSegment> _TrackSegments;

        #endregion

        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the BikeDatas EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBikeDatas(BikeData bikeData)
        {
            base.AddObject("BikeDatas", bikeData);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the BikeEvents EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBikeEvents(BikeEvent bikeEvent)
        {
            base.AddObject("BikeEvents", bikeEvent);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the BikeLaps EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBikeLaps(BikeLap bikeLap)
        {
            base.AddObject("BikeLaps", bikeLap);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the BikeSessions EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBikeSessions(BikeSession bikeSession)
        {
            base.AddObject("BikeSessions", bikeSession);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the BikeSplits EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBikeSplits(BikeSplit bikeSplit)
        {
            base.AddObject("BikeSplits", bikeSplit);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the TrackSegments EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTrackSegments(TrackSegment trackSegment)
        {
            base.AddObject("TrackSegments", trackSegment);
        }

        #endregion

    }

    #endregion

    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EllieSpeed.DataLoggerModel", Name="BikeData")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class BikeData : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new BikeData object.
        /// </summary>
        /// <param name="rPM">Initial value of the RPM property.</param>
        /// <param name="engineTemperature">Initial value of the EngineTemperature property.</param>
        /// <param name="waterTemperature">Initial value of the WaterTemperature property.</param>
        /// <param name="gear">Initial value of the Gear property.</param>
        /// <param name="fuel">Initial value of the Fuel property.</param>
        /// <param name="speedometer">Initial value of the Speedometer property.</param>
        /// <param name="posX">Initial value of the PosX property.</param>
        /// <param name="posY">Initial value of the PosY property.</param>
        /// <param name="posZ">Initial value of the PosZ property.</param>
        /// <param name="velocityX">Initial value of the VelocityX property.</param>
        /// <param name="velocityY">Initial value of the VelocityY property.</param>
        /// <param name="velocityZ">Initial value of the VelocityZ property.</param>
        /// <param name="accelerationX">Initial value of the AccelerationX property.</param>
        /// <param name="accelerationY">Initial value of the AccelerationY property.</param>
        /// <param name="accelerationZ">Initial value of the AccelerationZ property.</param>
        /// <param name="rot0">Initial value of the Rot0 property.</param>
        /// <param name="rot1">Initial value of the Rot1 property.</param>
        /// <param name="rot2">Initial value of the Rot2 property.</param>
        /// <param name="rot3">Initial value of the Rot3 property.</param>
        /// <param name="rot4">Initial value of the Rot4 property.</param>
        /// <param name="rot5">Initial value of the Rot5 property.</param>
        /// <param name="rot6">Initial value of the Rot6 property.</param>
        /// <param name="rot7">Initial value of the Rot7 property.</param>
        /// <param name="rot8">Initial value of the Rot8 property.</param>
        /// <param name="yaw">Initial value of the Yaw property.</param>
        /// <param name="pitch">Initial value of the Pitch property.</param>
        /// <param name="roll">Initial value of the Roll property.</param>
        /// <param name="yawVelocity">Initial value of the YawVelocity property.</param>
        /// <param name="pitchVelocity">Initial value of the PitchVelocity property.</param>
        /// <param name="rollVelocity">Initial value of the RollVelocity property.</param>
        /// <param name="suspNormLengthFront">Initial value of the SuspNormLengthFront property.</param>
        /// <param name="suspNormLengthRear">Initial value of the SuspNormLengthRear property.</param>
        /// <param name="crashed">Initial value of the Crashed property.</param>
        /// <param name="steer">Initial value of the Steer property.</param>
        /// <param name="throttle">Initial value of the Throttle property.</param>
        /// <param name="frontBrake">Initial value of the FrontBrake property.</param>
        /// <param name="rearBrake">Initial value of the RearBrake property.</param>
        /// <param name="clutch">Initial value of the Clutch property.</param>
        /// <param name="wheelSpeedFront">Initial value of the WheelSpeedFront property.</param>
        /// <param name="wheelSpeedRear">Initial value of the WheelSpeedRear property.</param>
        /// <param name="pitLimiter">Initial value of the PitLimiter property.</param>
        /// <param name="engineMapping">Initial value of the EngineMapping property.</param>
        /// <param name="id">Initial value of the ID property.</param>
        public static BikeData CreateBikeData(global::System.Double rPM, global::System.Double engineTemperature, global::System.Double waterTemperature, global::System.Int32 gear, global::System.Double fuel, global::System.Double speedometer, global::System.Double posX, global::System.Double posY, global::System.Double posZ, global::System.Double velocityX, global::System.Double velocityY, global::System.Double velocityZ, global::System.Double accelerationX, global::System.Double accelerationY, global::System.Double accelerationZ, global::System.Double rot0, global::System.Double rot1, global::System.Double rot2, global::System.Double rot3, global::System.Double rot4, global::System.Double rot5, global::System.Double rot6, global::System.Double rot7, global::System.Double rot8, global::System.Double yaw, global::System.Double pitch, global::System.Double roll, global::System.Double yawVelocity, global::System.Double pitchVelocity, global::System.Double rollVelocity, global::System.Double suspNormLengthFront, global::System.Double suspNormLengthRear, global::System.Int32 crashed, global::System.Double steer, global::System.Double throttle, global::System.Double frontBrake, global::System.Double rearBrake, global::System.Double clutch, global::System.Double wheelSpeedFront, global::System.Double wheelSpeedRear, global::System.Int32 pitLimiter, global::System.String engineMapping, global::System.Int64 id)
        {
            BikeData bikeData = new BikeData();
            bikeData.RPM = rPM;
            bikeData.EngineTemperature = engineTemperature;
            bikeData.WaterTemperature = waterTemperature;
            bikeData.Gear = gear;
            bikeData.Fuel = fuel;
            bikeData.Speedometer = speedometer;
            bikeData.PosX = posX;
            bikeData.PosY = posY;
            bikeData.PosZ = posZ;
            bikeData.VelocityX = velocityX;
            bikeData.VelocityY = velocityY;
            bikeData.VelocityZ = velocityZ;
            bikeData.AccelerationX = accelerationX;
            bikeData.AccelerationY = accelerationY;
            bikeData.AccelerationZ = accelerationZ;
            bikeData.Rot0 = rot0;
            bikeData.Rot1 = rot1;
            bikeData.Rot2 = rot2;
            bikeData.Rot3 = rot3;
            bikeData.Rot4 = rot4;
            bikeData.Rot5 = rot5;
            bikeData.Rot6 = rot6;
            bikeData.Rot7 = rot7;
            bikeData.Rot8 = rot8;
            bikeData.Yaw = yaw;
            bikeData.Pitch = pitch;
            bikeData.Roll = roll;
            bikeData.YawVelocity = yawVelocity;
            bikeData.PitchVelocity = pitchVelocity;
            bikeData.RollVelocity = rollVelocity;
            bikeData.SuspNormLengthFront = suspNormLengthFront;
            bikeData.SuspNormLengthRear = suspNormLengthRear;
            bikeData.Crashed = crashed;
            bikeData.Steer = steer;
            bikeData.Throttle = throttle;
            bikeData.FrontBrake = frontBrake;
            bikeData.RearBrake = rearBrake;
            bikeData.Clutch = clutch;
            bikeData.WheelSpeedFront = wheelSpeedFront;
            bikeData.WheelSpeedRear = wheelSpeedRear;
            bikeData.PitLimiter = pitLimiter;
            bikeData.EngineMapping = engineMapping;
            bikeData.ID = id;
            return bikeData;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double RPM
        {
            get
            {
                return _RPM;
            }
            set
            {
                if (_RPM != value)
                {
                    OnRPMChanging(value);
                    ReportPropertyChanging("RPM");
                    _RPM = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RPM");
                    OnRPMChanged();
                }
            }
        }
        private global::System.Double _RPM;
        partial void OnRPMChanging(global::System.Double value);
        partial void OnRPMChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double EngineTemperature
        {
            get
            {
                return _EngineTemperature;
            }
            set
            {
                if (_EngineTemperature != value)
                {
                    OnEngineTemperatureChanging(value);
                    ReportPropertyChanging("EngineTemperature");
                    _EngineTemperature = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("EngineTemperature");
                    OnEngineTemperatureChanged();
                }
            }
        }
        private global::System.Double _EngineTemperature;
        partial void OnEngineTemperatureChanging(global::System.Double value);
        partial void OnEngineTemperatureChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double WaterTemperature
        {
            get
            {
                return _WaterTemperature;
            }
            set
            {
                if (_WaterTemperature != value)
                {
                    OnWaterTemperatureChanging(value);
                    ReportPropertyChanging("WaterTemperature");
                    _WaterTemperature = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("WaterTemperature");
                    OnWaterTemperatureChanged();
                }
            }
        }
        private global::System.Double _WaterTemperature;
        partial void OnWaterTemperatureChanging(global::System.Double value);
        partial void OnWaterTemperatureChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Gear
        {
            get
            {
                return _Gear;
            }
            set
            {
                if (_Gear != value)
                {
                    OnGearChanging(value);
                    ReportPropertyChanging("Gear");
                    _Gear = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Gear");
                    OnGearChanged();
                }
            }
        }
        private global::System.Int32 _Gear;
        partial void OnGearChanging(global::System.Int32 value);
        partial void OnGearChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Fuel
        {
            get
            {
                return _Fuel;
            }
            set
            {
                if (_Fuel != value)
                {
                    OnFuelChanging(value);
                    ReportPropertyChanging("Fuel");
                    _Fuel = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Fuel");
                    OnFuelChanged();
                }
            }
        }
        private global::System.Double _Fuel;
        partial void OnFuelChanging(global::System.Double value);
        partial void OnFuelChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Speedometer
        {
            get
            {
                return _Speedometer;
            }
            set
            {
                if (_Speedometer != value)
                {
                    OnSpeedometerChanging(value);
                    ReportPropertyChanging("Speedometer");
                    _Speedometer = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Speedometer");
                    OnSpeedometerChanged();
                }
            }
        }
        private global::System.Double _Speedometer;
        partial void OnSpeedometerChanging(global::System.Double value);
        partial void OnSpeedometerChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double PosX
        {
            get
            {
                return _PosX;
            }
            set
            {
                if (_PosX != value)
                {
                    OnPosXChanging(value);
                    ReportPropertyChanging("PosX");
                    _PosX = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PosX");
                    OnPosXChanged();
                }
            }
        }
        private global::System.Double _PosX;
        partial void OnPosXChanging(global::System.Double value);
        partial void OnPosXChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double PosY
        {
            get
            {
                return _PosY;
            }
            set
            {
                if (_PosY != value)
                {
                    OnPosYChanging(value);
                    ReportPropertyChanging("PosY");
                    _PosY = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PosY");
                    OnPosYChanged();
                }
            }
        }
        private global::System.Double _PosY;
        partial void OnPosYChanging(global::System.Double value);
        partial void OnPosYChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double PosZ
        {
            get
            {
                return _PosZ;
            }
            set
            {
                if (_PosZ != value)
                {
                    OnPosZChanging(value);
                    ReportPropertyChanging("PosZ");
                    _PosZ = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PosZ");
                    OnPosZChanged();
                }
            }
        }
        private global::System.Double _PosZ;
        partial void OnPosZChanging(global::System.Double value);
        partial void OnPosZChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double VelocityX
        {
            get
            {
                return _VelocityX;
            }
            set
            {
                if (_VelocityX != value)
                {
                    OnVelocityXChanging(value);
                    ReportPropertyChanging("VelocityX");
                    _VelocityX = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("VelocityX");
                    OnVelocityXChanged();
                }
            }
        }
        private global::System.Double _VelocityX;
        partial void OnVelocityXChanging(global::System.Double value);
        partial void OnVelocityXChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double VelocityY
        {
            get
            {
                return _VelocityY;
            }
            set
            {
                if (_VelocityY != value)
                {
                    OnVelocityYChanging(value);
                    ReportPropertyChanging("VelocityY");
                    _VelocityY = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("VelocityY");
                    OnVelocityYChanged();
                }
            }
        }
        private global::System.Double _VelocityY;
        partial void OnVelocityYChanging(global::System.Double value);
        partial void OnVelocityYChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double VelocityZ
        {
            get
            {
                return _VelocityZ;
            }
            set
            {
                if (_VelocityZ != value)
                {
                    OnVelocityZChanging(value);
                    ReportPropertyChanging("VelocityZ");
                    _VelocityZ = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("VelocityZ");
                    OnVelocityZChanged();
                }
            }
        }
        private global::System.Double _VelocityZ;
        partial void OnVelocityZChanging(global::System.Double value);
        partial void OnVelocityZChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double AccelerationX
        {
            get
            {
                return _AccelerationX;
            }
            set
            {
                if (_AccelerationX != value)
                {
                    OnAccelerationXChanging(value);
                    ReportPropertyChanging("AccelerationX");
                    _AccelerationX = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AccelerationX");
                    OnAccelerationXChanged();
                }
            }
        }
        private global::System.Double _AccelerationX;
        partial void OnAccelerationXChanging(global::System.Double value);
        partial void OnAccelerationXChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double AccelerationY
        {
            get
            {
                return _AccelerationY;
            }
            set
            {
                if (_AccelerationY != value)
                {
                    OnAccelerationYChanging(value);
                    ReportPropertyChanging("AccelerationY");
                    _AccelerationY = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AccelerationY");
                    OnAccelerationYChanged();
                }
            }
        }
        private global::System.Double _AccelerationY;
        partial void OnAccelerationYChanging(global::System.Double value);
        partial void OnAccelerationYChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double AccelerationZ
        {
            get
            {
                return _AccelerationZ;
            }
            set
            {
                if (_AccelerationZ != value)
                {
                    OnAccelerationZChanging(value);
                    ReportPropertyChanging("AccelerationZ");
                    _AccelerationZ = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AccelerationZ");
                    OnAccelerationZChanged();
                }
            }
        }
        private global::System.Double _AccelerationZ;
        partial void OnAccelerationZChanging(global::System.Double value);
        partial void OnAccelerationZChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Rot0
        {
            get
            {
                return _Rot0;
            }
            set
            {
                if (_Rot0 != value)
                {
                    OnRot0Changing(value);
                    ReportPropertyChanging("Rot0");
                    _Rot0 = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Rot0");
                    OnRot0Changed();
                }
            }
        }
        private global::System.Double _Rot0;
        partial void OnRot0Changing(global::System.Double value);
        partial void OnRot0Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Rot1
        {
            get
            {
                return _Rot1;
            }
            set
            {
                if (_Rot1 != value)
                {
                    OnRot1Changing(value);
                    ReportPropertyChanging("Rot1");
                    _Rot1 = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Rot1");
                    OnRot1Changed();
                }
            }
        }
        private global::System.Double _Rot1;
        partial void OnRot1Changing(global::System.Double value);
        partial void OnRot1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Rot2
        {
            get
            {
                return _Rot2;
            }
            set
            {
                if (_Rot2 != value)
                {
                    OnRot2Changing(value);
                    ReportPropertyChanging("Rot2");
                    _Rot2 = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Rot2");
                    OnRot2Changed();
                }
            }
        }
        private global::System.Double _Rot2;
        partial void OnRot2Changing(global::System.Double value);
        partial void OnRot2Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Rot3
        {
            get
            {
                return _Rot3;
            }
            set
            {
                if (_Rot3 != value)
                {
                    OnRot3Changing(value);
                    ReportPropertyChanging("Rot3");
                    _Rot3 = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Rot3");
                    OnRot3Changed();
                }
            }
        }
        private global::System.Double _Rot3;
        partial void OnRot3Changing(global::System.Double value);
        partial void OnRot3Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Rot4
        {
            get
            {
                return _Rot4;
            }
            set
            {
                if (_Rot4 != value)
                {
                    OnRot4Changing(value);
                    ReportPropertyChanging("Rot4");
                    _Rot4 = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Rot4");
                    OnRot4Changed();
                }
            }
        }
        private global::System.Double _Rot4;
        partial void OnRot4Changing(global::System.Double value);
        partial void OnRot4Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Rot5
        {
            get
            {
                return _Rot5;
            }
            set
            {
                if (_Rot5 != value)
                {
                    OnRot5Changing(value);
                    ReportPropertyChanging("Rot5");
                    _Rot5 = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Rot5");
                    OnRot5Changed();
                }
            }
        }
        private global::System.Double _Rot5;
        partial void OnRot5Changing(global::System.Double value);
        partial void OnRot5Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Rot6
        {
            get
            {
                return _Rot6;
            }
            set
            {
                if (_Rot6 != value)
                {
                    OnRot6Changing(value);
                    ReportPropertyChanging("Rot6");
                    _Rot6 = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Rot6");
                    OnRot6Changed();
                }
            }
        }
        private global::System.Double _Rot6;
        partial void OnRot6Changing(global::System.Double value);
        partial void OnRot6Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Rot7
        {
            get
            {
                return _Rot7;
            }
            set
            {
                if (_Rot7 != value)
                {
                    OnRot7Changing(value);
                    ReportPropertyChanging("Rot7");
                    _Rot7 = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Rot7");
                    OnRot7Changed();
                }
            }
        }
        private global::System.Double _Rot7;
        partial void OnRot7Changing(global::System.Double value);
        partial void OnRot7Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Rot8
        {
            get
            {
                return _Rot8;
            }
            set
            {
                if (_Rot8 != value)
                {
                    OnRot8Changing(value);
                    ReportPropertyChanging("Rot8");
                    _Rot8 = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Rot8");
                    OnRot8Changed();
                }
            }
        }
        private global::System.Double _Rot8;
        partial void OnRot8Changing(global::System.Double value);
        partial void OnRot8Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Yaw
        {
            get
            {
                return _Yaw;
            }
            set
            {
                if (_Yaw != value)
                {
                    OnYawChanging(value);
                    ReportPropertyChanging("Yaw");
                    _Yaw = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Yaw");
                    OnYawChanged();
                }
            }
        }
        private global::System.Double _Yaw;
        partial void OnYawChanging(global::System.Double value);
        partial void OnYawChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Pitch
        {
            get
            {
                return _Pitch;
            }
            set
            {
                if (_Pitch != value)
                {
                    OnPitchChanging(value);
                    ReportPropertyChanging("Pitch");
                    _Pitch = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Pitch");
                    OnPitchChanged();
                }
            }
        }
        private global::System.Double _Pitch;
        partial void OnPitchChanging(global::System.Double value);
        partial void OnPitchChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Roll
        {
            get
            {
                return _Roll;
            }
            set
            {
                if (_Roll != value)
                {
                    OnRollChanging(value);
                    ReportPropertyChanging("Roll");
                    _Roll = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Roll");
                    OnRollChanged();
                }
            }
        }
        private global::System.Double _Roll;
        partial void OnRollChanging(global::System.Double value);
        partial void OnRollChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double YawVelocity
        {
            get
            {
                return _YawVelocity;
            }
            set
            {
                if (_YawVelocity != value)
                {
                    OnYawVelocityChanging(value);
                    ReportPropertyChanging("YawVelocity");
                    _YawVelocity = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("YawVelocity");
                    OnYawVelocityChanged();
                }
            }
        }
        private global::System.Double _YawVelocity;
        partial void OnYawVelocityChanging(global::System.Double value);
        partial void OnYawVelocityChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double PitchVelocity
        {
            get
            {
                return _PitchVelocity;
            }
            set
            {
                if (_PitchVelocity != value)
                {
                    OnPitchVelocityChanging(value);
                    ReportPropertyChanging("PitchVelocity");
                    _PitchVelocity = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PitchVelocity");
                    OnPitchVelocityChanged();
                }
            }
        }
        private global::System.Double _PitchVelocity;
        partial void OnPitchVelocityChanging(global::System.Double value);
        partial void OnPitchVelocityChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double RollVelocity
        {
            get
            {
                return _RollVelocity;
            }
            set
            {
                if (_RollVelocity != value)
                {
                    OnRollVelocityChanging(value);
                    ReportPropertyChanging("RollVelocity");
                    _RollVelocity = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RollVelocity");
                    OnRollVelocityChanged();
                }
            }
        }
        private global::System.Double _RollVelocity;
        partial void OnRollVelocityChanging(global::System.Double value);
        partial void OnRollVelocityChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double SuspNormLengthFront
        {
            get
            {
                return _SuspNormLengthFront;
            }
            set
            {
                if (_SuspNormLengthFront != value)
                {
                    OnSuspNormLengthFrontChanging(value);
                    ReportPropertyChanging("SuspNormLengthFront");
                    _SuspNormLengthFront = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SuspNormLengthFront");
                    OnSuspNormLengthFrontChanged();
                }
            }
        }
        private global::System.Double _SuspNormLengthFront;
        partial void OnSuspNormLengthFrontChanging(global::System.Double value);
        partial void OnSuspNormLengthFrontChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double SuspNormLengthRear
        {
            get
            {
                return _SuspNormLengthRear;
            }
            set
            {
                if (_SuspNormLengthRear != value)
                {
                    OnSuspNormLengthRearChanging(value);
                    ReportPropertyChanging("SuspNormLengthRear");
                    _SuspNormLengthRear = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SuspNormLengthRear");
                    OnSuspNormLengthRearChanged();
                }
            }
        }
        private global::System.Double _SuspNormLengthRear;
        partial void OnSuspNormLengthRearChanging(global::System.Double value);
        partial void OnSuspNormLengthRearChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Crashed
        {
            get
            {
                return _Crashed;
            }
            set
            {
                if (_Crashed != value)
                {
                    OnCrashedChanging(value);
                    ReportPropertyChanging("Crashed");
                    _Crashed = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Crashed");
                    OnCrashedChanged();
                }
            }
        }
        private global::System.Int32 _Crashed;
        partial void OnCrashedChanging(global::System.Int32 value);
        partial void OnCrashedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Steer
        {
            get
            {
                return _Steer;
            }
            set
            {
                if (_Steer != value)
                {
                    OnSteerChanging(value);
                    ReportPropertyChanging("Steer");
                    _Steer = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Steer");
                    OnSteerChanged();
                }
            }
        }
        private global::System.Double _Steer;
        partial void OnSteerChanging(global::System.Double value);
        partial void OnSteerChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Throttle
        {
            get
            {
                return _Throttle;
            }
            set
            {
                if (_Throttle != value)
                {
                    OnThrottleChanging(value);
                    ReportPropertyChanging("Throttle");
                    _Throttle = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Throttle");
                    OnThrottleChanged();
                }
            }
        }
        private global::System.Double _Throttle;
        partial void OnThrottleChanging(global::System.Double value);
        partial void OnThrottleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double FrontBrake
        {
            get
            {
                return _FrontBrake;
            }
            set
            {
                if (_FrontBrake != value)
                {
                    OnFrontBrakeChanging(value);
                    ReportPropertyChanging("FrontBrake");
                    _FrontBrake = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FrontBrake");
                    OnFrontBrakeChanged();
                }
            }
        }
        private global::System.Double _FrontBrake;
        partial void OnFrontBrakeChanging(global::System.Double value);
        partial void OnFrontBrakeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double RearBrake
        {
            get
            {
                return _RearBrake;
            }
            set
            {
                if (_RearBrake != value)
                {
                    OnRearBrakeChanging(value);
                    ReportPropertyChanging("RearBrake");
                    _RearBrake = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RearBrake");
                    OnRearBrakeChanged();
                }
            }
        }
        private global::System.Double _RearBrake;
        partial void OnRearBrakeChanging(global::System.Double value);
        partial void OnRearBrakeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Clutch
        {
            get
            {
                return _Clutch;
            }
            set
            {
                if (_Clutch != value)
                {
                    OnClutchChanging(value);
                    ReportPropertyChanging("Clutch");
                    _Clutch = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Clutch");
                    OnClutchChanged();
                }
            }
        }
        private global::System.Double _Clutch;
        partial void OnClutchChanging(global::System.Double value);
        partial void OnClutchChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double WheelSpeedFront
        {
            get
            {
                return _WheelSpeedFront;
            }
            set
            {
                if (_WheelSpeedFront != value)
                {
                    OnWheelSpeedFrontChanging(value);
                    ReportPropertyChanging("WheelSpeedFront");
                    _WheelSpeedFront = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("WheelSpeedFront");
                    OnWheelSpeedFrontChanged();
                }
            }
        }
        private global::System.Double _WheelSpeedFront;
        partial void OnWheelSpeedFrontChanging(global::System.Double value);
        partial void OnWheelSpeedFrontChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double WheelSpeedRear
        {
            get
            {
                return _WheelSpeedRear;
            }
            set
            {
                if (_WheelSpeedRear != value)
                {
                    OnWheelSpeedRearChanging(value);
                    ReportPropertyChanging("WheelSpeedRear");
                    _WheelSpeedRear = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("WheelSpeedRear");
                    OnWheelSpeedRearChanged();
                }
            }
        }
        private global::System.Double _WheelSpeedRear;
        partial void OnWheelSpeedRearChanging(global::System.Double value);
        partial void OnWheelSpeedRearChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PitLimiter
        {
            get
            {
                return _PitLimiter;
            }
            set
            {
                if (_PitLimiter != value)
                {
                    OnPitLimiterChanging(value);
                    ReportPropertyChanging("PitLimiter");
                    _PitLimiter = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PitLimiter");
                    OnPitLimiterChanged();
                }
            }
        }
        private global::System.Int32 _PitLimiter;
        partial void OnPitLimiterChanging(global::System.Int32 value);
        partial void OnPitLimiterChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String EngineMapping
        {
            get
            {
                return _EngineMapping;
            }
            set
            {
                if (_EngineMapping != value)
                {
                    OnEngineMappingChanging(value);
                    ReportPropertyChanging("EngineMapping");
                    _EngineMapping = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("EngineMapping");
                    OnEngineMappingChanged();
                }
            }
        }
        private global::System.String _EngineMapping;
        partial void OnEngineMappingChanging(global::System.String value);
        partial void OnEngineMappingChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EllieSpeed.DataLoggerModel", Name="BikeEvent")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class BikeEvent : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new BikeEvent object.
        /// </summary>
        /// <param name="riderName">Initial value of the RiderName property.</param>
        /// <param name="bikeID">Initial value of the BikeID property.</param>
        /// <param name="bikeName">Initial value of the BikeName property.</param>
        /// <param name="numberOfGears">Initial value of the NumberOfGears property.</param>
        /// <param name="maxRPM">Initial value of the MaxRPM property.</param>
        /// <param name="limiter">Initial value of the Limiter property.</param>
        /// <param name="shiftRPM">Initial value of the ShiftRPM property.</param>
        /// <param name="engineOptTemperature">Initial value of the EngineOptTemperature property.</param>
        /// <param name="engineTemperatureAlarmLower">Initial value of the EngineTemperatureAlarmLower property.</param>
        /// <param name="engineTemperatureAlarmUpper">Initial value of the EngineTemperatureAlarmUpper property.</param>
        /// <param name="maxFuel">Initial value of the MaxFuel property.</param>
        /// <param name="category">Initial value of the Category property.</param>
        /// <param name="trackID">Initial value of the TrackID property.</param>
        /// <param name="trackName">Initial value of the TrackName property.</param>
        /// <param name="trackLength">Initial value of the TrackLength property.</param>
        /// <param name="id">Initial value of the ID property.</param>
        public static BikeEvent CreateBikeEvent(global::System.String riderName, global::System.String bikeID, global::System.String bikeName, global::System.Int32 numberOfGears, global::System.Double maxRPM, global::System.Double limiter, global::System.Double shiftRPM, global::System.Double engineOptTemperature, global::System.Double engineTemperatureAlarmLower, global::System.Double engineTemperatureAlarmUpper, global::System.Double maxFuel, global::System.String category, global::System.String trackID, global::System.String trackName, global::System.Double trackLength, global::System.Int64 id)
        {
            BikeEvent bikeEvent = new BikeEvent();
            bikeEvent.RiderName = riderName;
            bikeEvent.BikeID = bikeID;
            bikeEvent.BikeName = bikeName;
            bikeEvent.NumberOfGears = numberOfGears;
            bikeEvent.MaxRPM = maxRPM;
            bikeEvent.Limiter = limiter;
            bikeEvent.ShiftRPM = shiftRPM;
            bikeEvent.EngineOptTemperature = engineOptTemperature;
            bikeEvent.EngineTemperatureAlarmLower = engineTemperatureAlarmLower;
            bikeEvent.EngineTemperatureAlarmUpper = engineTemperatureAlarmUpper;
            bikeEvent.MaxFuel = maxFuel;
            bikeEvent.Category = category;
            bikeEvent.TrackID = trackID;
            bikeEvent.TrackName = trackName;
            bikeEvent.TrackLength = trackLength;
            bikeEvent.ID = id;
            return bikeEvent;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String RiderName
        {
            get
            {
                return _RiderName;
            }
            set
            {
                if (_RiderName != value)
                {
                    OnRiderNameChanging(value);
                    ReportPropertyChanging("RiderName");
                    _RiderName = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("RiderName");
                    OnRiderNameChanged();
                }
            }
        }
        private global::System.String _RiderName;
        partial void OnRiderNameChanging(global::System.String value);
        partial void OnRiderNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String BikeID
        {
            get
            {
                return _BikeID;
            }
            set
            {
                if (_BikeID != value)
                {
                    OnBikeIDChanging(value);
                    ReportPropertyChanging("BikeID");
                    _BikeID = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("BikeID");
                    OnBikeIDChanged();
                }
            }
        }
        private global::System.String _BikeID;
        partial void OnBikeIDChanging(global::System.String value);
        partial void OnBikeIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String BikeName
        {
            get
            {
                return _BikeName;
            }
            set
            {
                if (_BikeName != value)
                {
                    OnBikeNameChanging(value);
                    ReportPropertyChanging("BikeName");
                    _BikeName = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("BikeName");
                    OnBikeNameChanged();
                }
            }
        }
        private global::System.String _BikeName;
        partial void OnBikeNameChanging(global::System.String value);
        partial void OnBikeNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 NumberOfGears
        {
            get
            {
                return _NumberOfGears;
            }
            set
            {
                if (_NumberOfGears != value)
                {
                    OnNumberOfGearsChanging(value);
                    ReportPropertyChanging("NumberOfGears");
                    _NumberOfGears = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("NumberOfGears");
                    OnNumberOfGearsChanged();
                }
            }
        }
        private global::System.Int32 _NumberOfGears;
        partial void OnNumberOfGearsChanging(global::System.Int32 value);
        partial void OnNumberOfGearsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double MaxRPM
        {
            get
            {
                return _MaxRPM;
            }
            set
            {
                if (_MaxRPM != value)
                {
                    OnMaxRPMChanging(value);
                    ReportPropertyChanging("MaxRPM");
                    _MaxRPM = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("MaxRPM");
                    OnMaxRPMChanged();
                }
            }
        }
        private global::System.Double _MaxRPM;
        partial void OnMaxRPMChanging(global::System.Double value);
        partial void OnMaxRPMChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Limiter
        {
            get
            {
                return _Limiter;
            }
            set
            {
                if (_Limiter != value)
                {
                    OnLimiterChanging(value);
                    ReportPropertyChanging("Limiter");
                    _Limiter = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Limiter");
                    OnLimiterChanged();
                }
            }
        }
        private global::System.Double _Limiter;
        partial void OnLimiterChanging(global::System.Double value);
        partial void OnLimiterChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double ShiftRPM
        {
            get
            {
                return _ShiftRPM;
            }
            set
            {
                if (_ShiftRPM != value)
                {
                    OnShiftRPMChanging(value);
                    ReportPropertyChanging("ShiftRPM");
                    _ShiftRPM = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ShiftRPM");
                    OnShiftRPMChanged();
                }
            }
        }
        private global::System.Double _ShiftRPM;
        partial void OnShiftRPMChanging(global::System.Double value);
        partial void OnShiftRPMChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double EngineOptTemperature
        {
            get
            {
                return _EngineOptTemperature;
            }
            set
            {
                if (_EngineOptTemperature != value)
                {
                    OnEngineOptTemperatureChanging(value);
                    ReportPropertyChanging("EngineOptTemperature");
                    _EngineOptTemperature = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("EngineOptTemperature");
                    OnEngineOptTemperatureChanged();
                }
            }
        }
        private global::System.Double _EngineOptTemperature;
        partial void OnEngineOptTemperatureChanging(global::System.Double value);
        partial void OnEngineOptTemperatureChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double EngineTemperatureAlarmLower
        {
            get
            {
                return _EngineTemperatureAlarmLower;
            }
            set
            {
                if (_EngineTemperatureAlarmLower != value)
                {
                    OnEngineTemperatureAlarmLowerChanging(value);
                    ReportPropertyChanging("EngineTemperatureAlarmLower");
                    _EngineTemperatureAlarmLower = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("EngineTemperatureAlarmLower");
                    OnEngineTemperatureAlarmLowerChanged();
                }
            }
        }
        private global::System.Double _EngineTemperatureAlarmLower;
        partial void OnEngineTemperatureAlarmLowerChanging(global::System.Double value);
        partial void OnEngineTemperatureAlarmLowerChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double EngineTemperatureAlarmUpper
        {
            get
            {
                return _EngineTemperatureAlarmUpper;
            }
            set
            {
                if (_EngineTemperatureAlarmUpper != value)
                {
                    OnEngineTemperatureAlarmUpperChanging(value);
                    ReportPropertyChanging("EngineTemperatureAlarmUpper");
                    _EngineTemperatureAlarmUpper = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("EngineTemperatureAlarmUpper");
                    OnEngineTemperatureAlarmUpperChanged();
                }
            }
        }
        private global::System.Double _EngineTemperatureAlarmUpper;
        partial void OnEngineTemperatureAlarmUpperChanging(global::System.Double value);
        partial void OnEngineTemperatureAlarmUpperChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double MaxFuel
        {
            get
            {
                return _MaxFuel;
            }
            set
            {
                if (_MaxFuel != value)
                {
                    OnMaxFuelChanging(value);
                    ReportPropertyChanging("MaxFuel");
                    _MaxFuel = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("MaxFuel");
                    OnMaxFuelChanged();
                }
            }
        }
        private global::System.Double _MaxFuel;
        partial void OnMaxFuelChanging(global::System.Double value);
        partial void OnMaxFuelChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Category
        {
            get
            {
                return _Category;
            }
            set
            {
                if (_Category != value)
                {
                    OnCategoryChanging(value);
                    ReportPropertyChanging("Category");
                    _Category = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Category");
                    OnCategoryChanged();
                }
            }
        }
        private global::System.String _Category;
        partial void OnCategoryChanging(global::System.String value);
        partial void OnCategoryChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TrackID
        {
            get
            {
                return _TrackID;
            }
            set
            {
                if (_TrackID != value)
                {
                    OnTrackIDChanging(value);
                    ReportPropertyChanging("TrackID");
                    _TrackID = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("TrackID");
                    OnTrackIDChanged();
                }
            }
        }
        private global::System.String _TrackID;
        partial void OnTrackIDChanging(global::System.String value);
        partial void OnTrackIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TrackName
        {
            get
            {
                return _TrackName;
            }
            set
            {
                if (_TrackName != value)
                {
                    OnTrackNameChanging(value);
                    ReportPropertyChanging("TrackName");
                    _TrackName = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("TrackName");
                    OnTrackNameChanged();
                }
            }
        }
        private global::System.String _TrackName;
        partial void OnTrackNameChanging(global::System.String value);
        partial void OnTrackNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double TrackLength
        {
            get
            {
                return _TrackLength;
            }
            set
            {
                if (_TrackLength != value)
                {
                    OnTrackLengthChanging(value);
                    ReportPropertyChanging("TrackLength");
                    _TrackLength = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TrackLength");
                    OnTrackLengthChanged();
                }
            }
        }
        private global::System.Double _TrackLength;
        partial void OnTrackLengthChanging(global::System.Double value);
        partial void OnTrackLengthChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EllieSpeed.DataLoggerModel", Name="BikeLap")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class BikeLap : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new BikeLap object.
        /// </summary>
        /// <param name="lapTime">Initial value of the LapTime property.</param>
        /// <param name="best">Initial value of the Best property.</param>
        /// <param name="lapNum">Initial value of the LapNum property.</param>
        /// <param name="id">Initial value of the ID property.</param>
        public static BikeLap CreateBikeLap(global::System.Int32 lapTime, global::System.Int32 best, global::System.Int32 lapNum, global::System.Int64 id)
        {
            BikeLap bikeLap = new BikeLap();
            bikeLap.LapTime = lapTime;
            bikeLap.Best = best;
            bikeLap.LapNum = lapNum;
            bikeLap.ID = id;
            return bikeLap;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LapTime
        {
            get
            {
                return _LapTime;
            }
            set
            {
                OnLapTimeChanging(value);
                ReportPropertyChanging("LapTime");
                _LapTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LapTime");
                OnLapTimeChanged();
            }
        }
        private global::System.Int32 _LapTime;
        partial void OnLapTimeChanging(global::System.Int32 value);
        partial void OnLapTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Best
        {
            get
            {
                return _Best;
            }
            set
            {
                OnBestChanging(value);
                ReportPropertyChanging("Best");
                _Best = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Best");
                OnBestChanged();
            }
        }
        private global::System.Int32 _Best;
        partial void OnBestChanging(global::System.Int32 value);
        partial void OnBestChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 LapNum
        {
            get
            {
                return _LapNum;
            }
            set
            {
                OnLapNumChanging(value);
                ReportPropertyChanging("LapNum");
                _LapNum = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("LapNum");
                OnLapNumChanged();
            }
        }
        private global::System.Int32 _LapNum;
        partial void OnLapNumChanging(global::System.Int32 value);
        partial void OnLapNumChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EllieSpeed.DataLoggerModel", Name="BikeSession")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class BikeSession : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new BikeSession object.
        /// </summary>
        /// <param name="session">Initial value of the Session property.</param>
        /// <param name="conditions">Initial value of the Conditions property.</param>
        /// <param name="airTemperature">Initial value of the AirTemperature property.</param>
        /// <param name="trackTemperature">Initial value of the TrackTemperature property.</param>
        /// <param name="setupFileName">Initial value of the SetupFileName property.</param>
        /// <param name="id">Initial value of the ID property.</param>
        public static BikeSession CreateBikeSession(global::System.Int32 session, global::System.Int32 conditions, global::System.Double airTemperature, global::System.Double trackTemperature, global::System.String setupFileName, global::System.Int64 id)
        {
            BikeSession bikeSession = new BikeSession();
            bikeSession.Session = session;
            bikeSession.Conditions = conditions;
            bikeSession.AirTemperature = airTemperature;
            bikeSession.TrackTemperature = trackTemperature;
            bikeSession.SetupFileName = setupFileName;
            bikeSession.ID = id;
            return bikeSession;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Session
        {
            get
            {
                return _Session;
            }
            set
            {
                OnSessionChanging(value);
                ReportPropertyChanging("Session");
                _Session = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Session");
                OnSessionChanged();
            }
        }
        private global::System.Int32 _Session;
        partial void OnSessionChanging(global::System.Int32 value);
        partial void OnSessionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Conditions
        {
            get
            {
                return _Conditions;
            }
            set
            {
                OnConditionsChanging(value);
                ReportPropertyChanging("Conditions");
                _Conditions = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Conditions");
                OnConditionsChanged();
            }
        }
        private global::System.Int32 _Conditions;
        partial void OnConditionsChanging(global::System.Int32 value);
        partial void OnConditionsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double AirTemperature
        {
            get
            {
                return _AirTemperature;
            }
            set
            {
                OnAirTemperatureChanging(value);
                ReportPropertyChanging("AirTemperature");
                _AirTemperature = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AirTemperature");
                OnAirTemperatureChanged();
            }
        }
        private global::System.Double _AirTemperature;
        partial void OnAirTemperatureChanging(global::System.Double value);
        partial void OnAirTemperatureChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double TrackTemperature
        {
            get
            {
                return _TrackTemperature;
            }
            set
            {
                OnTrackTemperatureChanging(value);
                ReportPropertyChanging("TrackTemperature");
                _TrackTemperature = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TrackTemperature");
                OnTrackTemperatureChanged();
            }
        }
        private global::System.Double _TrackTemperature;
        partial void OnTrackTemperatureChanging(global::System.Double value);
        partial void OnTrackTemperatureChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SetupFileName
        {
            get
            {
                return _SetupFileName;
            }
            set
            {
                OnSetupFileNameChanging(value);
                ReportPropertyChanging("SetupFileName");
                _SetupFileName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("SetupFileName");
                OnSetupFileNameChanged();
            }
        }
        private global::System.String _SetupFileName;
        partial void OnSetupFileNameChanging(global::System.String value);
        partial void OnSetupFileNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EllieSpeed.DataLoggerModel", Name="BikeSplit")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class BikeSplit : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new BikeSplit object.
        /// </summary>
        /// <param name="split">Initial value of the Split property.</param>
        /// <param name="splitTime">Initial value of the SplitTime property.</param>
        /// <param name="bestDiff">Initial value of the BestDiff property.</param>
        /// <param name="id">Initial value of the ID property.</param>
        public static BikeSplit CreateBikeSplit(global::System.Int32 split, global::System.Int32 splitTime, global::System.Int32 bestDiff, global::System.Int64 id)
        {
            BikeSplit bikeSplit = new BikeSplit();
            bikeSplit.Split = split;
            bikeSplit.SplitTime = splitTime;
            bikeSplit.BestDiff = bestDiff;
            bikeSplit.ID = id;
            return bikeSplit;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Split
        {
            get
            {
                return _Split;
            }
            set
            {
                OnSplitChanging(value);
                ReportPropertyChanging("Split");
                _Split = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Split");
                OnSplitChanged();
            }
        }
        private global::System.Int32 _Split;
        partial void OnSplitChanging(global::System.Int32 value);
        partial void OnSplitChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SplitTime
        {
            get
            {
                return _SplitTime;
            }
            set
            {
                OnSplitTimeChanging(value);
                ReportPropertyChanging("SplitTime");
                _SplitTime = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SplitTime");
                OnSplitTimeChanged();
            }
        }
        private global::System.Int32 _SplitTime;
        partial void OnSplitTimeChanging(global::System.Int32 value);
        partial void OnSplitTimeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 BestDiff
        {
            get
            {
                return _BestDiff;
            }
            set
            {
                OnBestDiffChanging(value);
                ReportPropertyChanging("BestDiff");
                _BestDiff = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BestDiff");
                OnBestDiffChanged();
            }
        }
        private global::System.Int32 _BestDiff;
        partial void OnBestDiffChanging(global::System.Int32 value);
        partial void OnBestDiffChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();

        #endregion

    
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="EllieSpeed.DataLoggerModel", Name="TrackSegment")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TrackSegment : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new TrackSegment object.
        /// </summary>
        /// <param name="type">Initial value of the Type property.</param>
        /// <param name="length">Initial value of the Length property.</param>
        /// <param name="radius">Initial value of the Radius property.</param>
        /// <param name="angle">Initial value of the Angle property.</param>
        /// <param name="start1">Initial value of the Start1 property.</param>
        /// <param name="start2">Initial value of the Start2 property.</param>
        /// <param name="id">Initial value of the ID property.</param>
        public static TrackSegment CreateTrackSegment(global::System.Int32 type, global::System.Double length, global::System.Double radius, global::System.Double angle, global::System.Double start1, global::System.Double start2, global::System.Int64 id)
        {
            TrackSegment trackSegment = new TrackSegment();
            trackSegment.Type = type;
            trackSegment.Length = length;
            trackSegment.Radius = radius;
            trackSegment.Angle = angle;
            trackSegment.Start1 = start1;
            trackSegment.Start2 = start2;
            trackSegment.ID = id;
            return trackSegment;
        }

        #endregion

        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Type
        {
            get
            {
                return _Type;
            }
            set
            {
                OnTypeChanging(value);
                ReportPropertyChanging("Type");
                _Type = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Type");
                OnTypeChanged();
            }
        }
        private global::System.Int32 _Type;
        partial void OnTypeChanging(global::System.Int32 value);
        partial void OnTypeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Length
        {
            get
            {
                return _Length;
            }
            set
            {
                OnLengthChanging(value);
                ReportPropertyChanging("Length");
                _Length = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Length");
                OnLengthChanged();
            }
        }
        private global::System.Double _Length;
        partial void OnLengthChanging(global::System.Double value);
        partial void OnLengthChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Radius
        {
            get
            {
                return _Radius;
            }
            set
            {
                OnRadiusChanging(value);
                ReportPropertyChanging("Radius");
                _Radius = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Radius");
                OnRadiusChanged();
            }
        }
        private global::System.Double _Radius;
        partial void OnRadiusChanging(global::System.Double value);
        partial void OnRadiusChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Angle
        {
            get
            {
                return _Angle;
            }
            set
            {
                OnAngleChanging(value);
                ReportPropertyChanging("Angle");
                _Angle = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Angle");
                OnAngleChanged();
            }
        }
        private global::System.Double _Angle;
        partial void OnAngleChanging(global::System.Double value);
        partial void OnAngleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Start1
        {
            get
            {
                return _Start1;
            }
            set
            {
                OnStart1Changing(value);
                ReportPropertyChanging("Start1");
                _Start1 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Start1");
                OnStart1Changed();
            }
        }
        private global::System.Double _Start1;
        partial void OnStart1Changing(global::System.Double value);
        partial void OnStart1Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Start2
        {
            get
            {
                return _Start2;
            }
            set
            {
                OnStart2Changing(value);
                ReportPropertyChanging("Start2");
                _Start2 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Start2");
                OnStart2Changed();
            }
        }
        private global::System.Double _Start2;
        partial void OnStart2Changing(global::System.Double value);
        partial void OnStart2Changed();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int64 _ID;
        partial void OnIDChanging(global::System.Int64 value);
        partial void OnIDChanged();

        #endregion

    
    }

    #endregion

    
}
